#include "main.h"
#include "stm32f0xx_hal.h"
#include <string.h>
#include <stdlib.h>

void SystemClock_Config(void);
void Error_Handler(void);

int main(void)
{
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; //enable GPIOB
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN; //enable GPIOC
	RCC->APB1ENR |= (1 << 22); //enable I2C2
	I2C2->TIMINGR = 0x10420F13;
	I2C2->CR1 |= (1 << 0); //enable I2C peripheral
	GPIOB->MODER |= (1 << 23) | (1 << 27) | (1 << 28); //Set PB11 & PB13 to alternate function mode & PB14 to general purpose output mode
	GPIOC->MODER |= (1 << 0); //Set PC0 to general purpose output mode and push-pull output(already set to that)
	GPIOC->MODER |= (1 << 12) | (1 << 18) | (1 << 14) | (1 << 16); //LED Modes
	GPIOB->OTYPER |= (1 << 11) | (1 << 13); //set PB11 & PB13 to open-drain type output & PB14 to push-pull(but its already in that state).
	GPIOB->AFR[1] |= (1 << 12) | (1 << 22) | (1 << 20); //Set alternate function of PB11 to I2C2_SDA & PB13 to I2C2_SCL
	GPIOB->ODR |= (1 << 14); //Set pin PB14 high
	GPIOC->ODR |= (1 << 0); //Set pin PC0 high

	I2C2->CR2 &= ~((0x7F << 16) | (0x3FF << 0)); //Clear NBYTES/SADD bit fields; NBYTES field begins at bit 16 and SADD bit begins at bit 0
	I2C2->CR2 |= (1 << 16) | (0x6B << 1); //set number of bytes to transmit and set slave address
	I2C2->CR2 |= (1 << 13); //Set start bit
  	int breakout = 0;
	int finished = 0;
	
	while(1)
	{
		if((finished == 1) && (breakout == 1)) //We are done
		{
			breakout = 0;
			finished = 0;
			break;
		}
		
		if(breakout == 1) //Error happened
		{
			break;
		}
	
		if((((I2C2->ISR & (1 << 4)) == 1) || ((I2C2->ISR & (1 << 1)) == 1) || ((I2C2->ISR & (1 << 0)) == 1)) && (breakout == 0))  //check for TXIS or NACKF
		{														

			if((I2C2->ISR & (1 << 4)) == 1)  //NACKF, so error
			{
				GPIOC->ODR |= (1 << 6);
				breakout = 1;
				break;
			}
			
			else if(breakout == 0)  //TXIS succeeded
			{

				I2C2->TXDR = 0x0F;	//write WHO_AM_I address to TXDR
				
				while(1)
				{
					HAL_Delay(200);
					GPIOC->ODR ^= (1 << 8);
					
					if(breakout == 1) break; 
					
					if((I2C2->CR2 & (1 << 16)) == 1) break; 
			
					if((I2C2->ISR & (1 << 6)) && (breakout == 0))		//Listen for Transfer Complete
					{
						
									HAL_Delay(200);

																				GPIOC->ODR ^= (1 << 7);
						
							I2C2->CR2 &= ~((0x7F << 16) | (0x3FF << 0)); //Clear NBYTES/SADD bit fields; NBYTES field begins at bit 16 and SADD bit begins at bit 0
							I2C2->CR2 |= (1 << 16) | (0x6B << 1); //set number of bytes to transmit and set slave address
							I2C2->CR2 |= (1 << 10); //Set RD_WRN to read
							I2C2->CR2 |= (1 << 13); //Set start bit
						
							while(1)
							{
								HAL_Delay(200);
								GPIOC->ODR ^= (1 << 8);
								
								if(breakout == 1) break;
								
								if(((I2C2->ISR & (1 << 2))) || ((I2C2->ISR & (1 << 4)) == 1)) //check for RXNE or NACKF
								{
									
									if(((I2C2->ISR & (1 << 4)) == 1) && (breakout == 0))	//Error if NACKF
									{
										GPIOC->ODR |= (1 << 6);
										breakout = 1;
										break;
									}
									
									else	//We got RXNE
									{
										if((I2C2->RXDR == 0xD4) && (breakout == 0))
										{
											while(1)
											{
												HAL_Delay(200);
												GPIOC->ODR ^= (1 << 7);
												
												if(I2C2->ISR & (1 << 6))	//Listen for Transfer complete
												{
													I2C2->CR2 |= (1 << 14);
													GPIOC->ODR ^= (1 << 9);
													breakout = 1;
													finished = 1;
													break;				//DONE, BREAKOUT to top!
												}
											}
										}
									}
								}
							}
					}
				}
			}
		}
	}
	
while(1)
{
	
	
	
}
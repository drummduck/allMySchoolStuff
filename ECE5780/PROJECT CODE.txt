#include "main.h"
#include "stm32f0xx_hal.h"
#include <string.h>
#include <stdlib.h>
int first = 0;
char Rreg;
int flag;
char *color = "";
char *command = "";

void SystemClock_Config(void);
void Error_Handler(void);
void charTrans(char x);
void stringTrans(char word[]);
char* append(char* dest, char source);

int main(void)
{
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

	

	NVIC_EnableIRQ(USART3_4_IRQn);
	NVIC_SetPriority(USART3_4_IRQn, 0);
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN; //ENABLE GPIOC clock
	RCC->APB1ENR |= (1 << 18); //Enable clock to USART3
	USART3->BRR = HAL_RCC_GetHCLKFreq()/9600;  //Baud rate
	USART3->CR1 |= (1 << 2) | (1 << 3) | (1 << 0) | (1 << 5); //enable RX/TX/USART3/interrupt
	GPIOC->MODER |= (1 << 12) | (1 << 14) | (1 << 16) | (1 << 18); //LED general purpose output
	GPIOC->MODER |= (1 << 9) | (1 << 11);	//USART3 RX/TX lines alternate I/O for PC4(TX) and PC5(RX)
	GPIOC->AFR[0] |= (1 << 16) | (1 << 20); //Setting pins PC4 and PC5 to AF1 

	

	
	stringTrans("\r\nCMD?\r\n");
	int secondCommand = 0;
	int LED;

				
  	while (1)
  	{
		if(flag && secondCommand)
		{
			 if(strcmp(command, "0") == 0)
			 {
				 GPIOC->ODR &= ~(1 << LED);
				 stringTrans(color);
				 stringTrans("Off\r\n");
				 stringTrans("CMD?\r\n");
				 color = "";
				 command = "";
				 secondCommand = 0;
				 first = 0;
				 flag = 0;
			 }
				 
			 else if(strcmp(command, "1") == 0)
			 {
				 GPIOC->ODR |= (1 << LED);
				 stringTrans(color);
				 stringTrans("On\r\n");
				 stringTrans("CMD?\r\n");
				 color = "";
				 command = "";
				 secondCommand = 0;
				 first = 0;
				 flag = 0;
			 }
				 
			 else if(strcmp(command, "2") == 0)
			 {
				 GPIOC->ODR ^= (1 << LED);
				 stringTrans(color);
				 stringTrans("Toggle\r\n");
				 stringTrans("CMD?\r\n");
				 color = "";
				 command = "";
				 secondCommand = 0;
				 first = 0;
				 flag = 0;
			 }

			 else
			 {
				 stringTrans("Undefined command\r\n");
				 stringTrans("CMD?\r\n");
				 color = "";
				 command = "";
				 secondCommand = 0;
				 first = 0;
				 flag = 0;
			 }
		}
	
		
		else if(flag)
	 	{
			if(strcmp(color, "red") == 0)
			{
				 LED = 6;
				 color = "Red ";
				 secondCommand = 1;
				 first = 1;
				 flag = 0;
			}
					 
			else if(strcmp(color, "blue") == 0)
			{
				 LED = 7;
				 color = "Blue ";
				 secondCommand = 1;
				 first = 1;
				 flag = 0;
			}				 
	
			else if(strcmp(color, "orange") == 0)
			{	
				 LED = 8;
				 color = "Orange ";
				 secondCommand = 1;
				 first = 1;
				 flag = 0;
			}			 
				 
			else if(strcmp(color, "green") == 0)
			{
				 LED = 9;
				 color = "Green ";
				 secondCommand = 1;
				 first = 1;
				 flag = 0;
			}

			else
			{
				 stringTrans("Undefined command\r\n");
				 stringTrans("CMD?\r\n");
				 color = "";
				 first = 0;
				 flag = 0;
			}				 
		}
	}

}


void charTrans(char x)
{
	while((USART3->ISR & (1 << 7)) == 0)
	{
		
	}
	USART3->TDR = x;
}

void stringTrans(char word[])
{
	int i = 0;	
	while(1)
	{
		if(word[i] != '\0')
		{			
			charTrans(word[i]);
			i++;
		}
		else break;
	}
}


void  USART3_4_IRQHandler(void)
{
	Rreg = USART3->RDR;
	charTrans(Rreg);
	
	if(!first)
	{	
		if(Rreg == '\r')
		{
			charTrans('\n');
			//first = 1;
			flag = 1;
		}
		else 
		{
			color = append(color, Rreg);
		}
	}
	
	else
	{
		if(Rreg == '\r')
		{
			charTrans('\n');
			//first = 0;
			flag = 1;
		}
		else command = append(command, Rreg);
	}
}

char * append(char *orig, char c)
{
    size_t len = strlen(orig);
    char *str2 = malloc(len + 1 + 1 ); /* one for extra char, one for trailing zero */
	
    strcpy(str2, orig);		
    str2[len] = c;
    str2[len + 1] = '\0';
		return str2;
		
}

/** System Clock Configuration */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler */ 
}



#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

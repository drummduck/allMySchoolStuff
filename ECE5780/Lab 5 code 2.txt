#include "main.h"
#include "stm32f0xx_hal.h"
#include <string.h>
#include <stdlib.h>

int xL, xH, yL, yH;
int16_t y, x;
void SystemClock_Config(void);
void Error_Handler(void);

int main(void)
{
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; //enable GPIOB
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN; //enable GPIOC
	RCC->APB1ENR |= (1 << 22); //enable I2C2
	I2C2->TIMINGR = 0x10420F13;
	I2C2->CR1 |= (1 << 0); //enable I2C peripheral
	GPIOB->MODER |= (1 << 23) | (1 << 27) | (1 << 28); //Set PB11 & PB13 to alternate function mode & PB14 to general purpose output mode
	GPIOC->MODER |= (1 << 0); //Set PC0 to general purpose output mode and push-pull output(already set to that)
	GPIOC->MODER |= (1 << 12) | (1 << 18) | (1 << 14) | (1 << 16); //LED Modes
	GPIOB->OTYPER |= (1 << 11) | (1 << 13); //set PB11 & PB13 to open-drain type output & PB14 to push-pull(but its already in that state).
	GPIOB->AFR[1] |= (1 << 12) | (1 << 22) | (1 << 20); //Set alternate function of PB11 to I2C2_SDA & PB13 to I2C2_SCL
	GPIOB->ODR |= (1 << 14); //Set pin PB14 high
	GPIOC->ODR |= (1 << 0); //Set pin PC0 high

	I2C2->CR2 &= ~((0x7F << 16) | (0x3FF << 0)); //Clear NBYTES/SADD bit fields; NBYTES field begins at bit 16 and SADD bit begins at bit 0
	I2C2->CR2 |= (2 << 16) | (0x6B << 1); //set number of bytes to transmit and set slave address
	I2C2->CR2 |= (1 << 13); //Set start bit
	int secondCommand = 0;
	int broken = 0;

//Sets up the Axis on the gyro
	while(1)
	{
		if(secondCommand == 2) 
		{
			secondCommand = 0;
			I2C2->CR2 |= (1 << 14);
			break;
		}
		
		if(((I2C2->ISR & (1 << 4)) == 1) || ((I2C2->ISR & (1 << 1)) == 1) || ((I2C2->ISR & (1 << 0)) == 1))	//check for TXIS or NACKF
		{
			
				if((I2C2->ISR & (1 << 4)) == 1)  //NACKF, so error
				{
					GPIOC->ODR |= (1 << 6) | (1 << 7) | (1 << 8) | (1 << 9);
					broken = 1;
					break;
				}
				
				else  //TXIS succeeded
				{

					if(secondCommand == 0) 
					{
						I2C2->TXDR = 0x20;	//write WHO_AM_I address to TXDR
						secondCommand = 1;
						continue;
					}
					else I2C2->TXDR = 0x0B;
					
					while(1)
					{
						if(I2C2->ISR & (1 << 6))		//Listen for Transfer Complete		//Maybe check for error
						{
							secondCommand++;
							break;
						}
					}
				}				
		}
	}


		
	while(1)
	{	
		if(broken == 1) break;
		
		HAL_Delay(100);
			
		I2C2->CR2 &= ~((0x7F << 16) | (0x3FF << 0)); //Clear NBYTES/SADD bit fields; NBYTES field begins at bit 16 and SADD bit begins at bit 0
		I2C2->CR2 |= (1 << 16) | (0x6B << 1); //set number of bytes to transmit and set slave address
		I2C2->CR2 &= ~(1 << 10);
		I2C2->CR2 |= (1 << 13); //Set start bit

		
		while(1)
		{
			if((((I2C2->ISR & (1 << 4)) == 1) || ((I2C2->ISR & (1 << 1)) == 1) || ((I2C2->ISR & (1 << 0)) == 1)))  //check for TXIS or NACKF
			{
				if((I2C2->ISR & (1 << 4)) == 1)  //NACKF, so error
				{
					GPIOC->ODR |= (1 << 6) | (1 << 7) | (1 << 8) | (1 << 9);
					broken = 1;
					break;
				}
				
				else
				{
					I2C2->TXDR = 0xA8;
					break;
				}
			}
		}
		
		if(broken) break;
		while(1)
		{
				if(I2C2->ISR & (1 << 6))	//Listen for Transfer complete
				{
					break;
				}
		}
		
		I2C2->CR2 &= ~((0x7F << 16) | (0x3FF << 0)); //Clear NBYTES/SADD bit fields; NBYTES field begins at bit 16 and SADD bit begins at bit 0
		I2C2->CR2 |= (1 << 10);
		I2C2->CR2 |= (4 << 16) | (0x6B << 1); //set number of bytes to transmit and set slave address
		I2C2->CR2 |= (1 << 13); //Set start bit
		
		if(broken) break;	
		while(1)
		{
			if((I2C2->ISR & (1 << 4)) || (I2C2->ISR & (1 << 2)))  //check for TXIS or NACKF
			{
				if((I2C2->ISR & (1 << 4)) == 1)  //NACKF, so error
				{
					GPIOC->ODR |= (1 << 6) | (1 << 7) | (1 << 8) | (1 << 9);
					broken = 1;
					break;
				}
				
				else
				{
					xL = I2C2->RXDR;
					break;
				}
			}
		}
		
		if(broken) break;
		while(1)
		{
			if((I2C2->ISR & (1 << 4)) || (I2C2->ISR & (1 << 2)))  //check for TXIS or NACKF
			{
				if((I2C2->ISR & (1 << 4)) == 1)  //NACKF, so error
				{
					GPIOC->ODR |= (1 << 6) | (1 << 7) | (1 << 8) | (1 << 9);
					broken = 1;
					break;
				}
				
				else
				{
					xH = I2C2->RXDR;
					break;
				}
			}
		}
		
		if(broken) break;
		while(1)
		{
			if((I2C2->ISR & (1 << 4)) || (I2C2->ISR & (1 << 2)))  //check for TXIS or NACKF
			{
				if((I2C2->ISR & (1 << 4)) == 1)  //NACKF, so error
				{
					GPIOC->ODR |= (1 << 6) | (1 << 7) | (1 << 8) | (1 << 9);
					broken = 1;
					break;
				}
				
				else
				{
					yL = I2C2->RXDR;
					break;
				}
			}
		}
		
		if(broken) break;
		while(1)
		{
			if((I2C2->ISR & (1 << 4)) || (I2C2->ISR & (1 << 2)))  //check for TXIS or NACKF
			{
				if((I2C2->ISR & (1 << 4)) == 1)  //NACKF, so error
				{
					GPIOC->ODR |= (1 << 6) | (1 << 7) | (1 << 8) | (1 << 9);
					broken = 1;
					break;
				}
				
				else
				{
					yH = I2C2->RXDR;
					break;
				}
			}
		}
		
		if(broken) break;
		while(1)
		{
			if(I2C2->ISR & (1 << 6))	//Listen for Transfer complete
				{
					I2C2->CR2 |= (1 << 14);
					break;
				}
		}
		
		x = xH;
		x = (x << 8);
		x = (x | xL);
		y = yH;
		y = (y << 8);
		y = (y | yL);
		
		if(x > -4000 && x < 4000)
		{
			GPIOC->ODR &= ~(1 << 8);
			GPIOC->ODR &= ~(1 << 9);
		}
		else if(x < -4000) GPIOC->ODR |= (1 << 8);
		else if(x > 4000) GPIOC->ODR |= (1 << 9);
		
		if(y > -4000 && y < 4000)
		{
			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &= ~(1 << 7);
		}
		else if(y < -4000) GPIOC->ODR |= (1 << 7);
		else if(y > 4000) GPIOC->ODR |= (1 << 6);
		//Make threshold so lights change nicely
		//To read two registers, set MSB of first register.	
		

	}
	/*
	//uint32_t f = 1000;
	//SysTick_Config(HAL_RCC_GetHCLKFreq()/f);
	//NVIC_EnableIRQ(SysTick_IRQn);
	//NVIC_SetPriority(SysTick_IRQn, 0);
	//NVIC_EnableIRQ(TIM2_IRQn);
	NVIC_EnableIRQ(TIM3_IRQn);
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
	TIM3->PSC = 2;
	TIM3->ARR = 5000;
	TIM3->CCMR2 |= (1 << 14) | (1 << 13) | (1 << 12) | (1 << 6) | (1 << 5);
	TIM3->CCER |= (1 << 12) | (1 << 8);
	TIM3->CCR3 = 0;
	TIM3->CCR4 = 0;
	TIM2->PSC = 7999;
	TIM2->ARR = 250;
	TIM3->DIER |= (1 << 0);
	TIM2->DIER |= (1 << 0);
	TIM3->CR1 |= (1 << 0);
	TIM2->CR1 |= (1 << 0);
	

	
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
	NVIC_EnableIRQ(USART3_4_IRQn);
	NVIC_SetPriority(USART3_4_IRQn, 0);
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN; //ENABLE GPIOC clock
	RCC->APB1ENR |= (1 << 18); //Enable clock to USART3
	USART3->BRR = HAL_RCC_GetHCLKFreq()/9600;  //Baud rate
	USART3->CR1 |= (1 << 2) | (1 << 3) | (1 << 0) | (1 << 5); //enable RX/TX/USART
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
	EXTI->IMR |= (1 << 0);
	EXTI->RTSR |= (1 << 0);
	NVIC_EnableIRQ(EXTI0_1_IRQn);
	NVIC_SetPriority(EXTI0_1_IRQn, 1);
	GPIOC->MODER |= (1 << 12) | (1 << 14) | (1 << 16) | (1 << 18); //LED general purpose output
	GPIOC->MODER |= (1 << 9) | (1 << 11);	//USART RX/TX lines alternate I/O
	GPIOC->AFR[0] |= (1 << 16) | (1 << 20);
	GPIOA->ODR |= (1 << 6)| (1 << 8);
	
	uint32_t debouncer = 0;
	
	stringTrans("\r\nCMD?\r\n");
	int secondCommand = 0;
	int LED;

				
  while (1)
  {
		if(flag && secondCommand)
		{
			 if(strcmp(command, "0") == 0)
			 {
				 GPIOC->ODR &= ~(1 << LED);
				 stringTrans(color);
				 stringTrans("Off\r\n");
				 stringTrans("CMD?\r\n");
				 color = "";
				 command = "";
				 secondCommand = 0;
				 flag = 0;
			 }
				 
			 else if(strcmp(command, "1") == 0)
			 {
				 GPIOC->ODR |= (1 << LED);
				 stringTrans(color);
				 stringTrans("On\r\n");
				 stringTrans("CMD?\r\n");
				 color = "";
				 command = "";
				 secondCommand = 0;
				 flag = 0;
			 }
				 
			 else if(strcmp(command, "2") == 0)
			 {
				 GPIOC->ODR ^= (1 << LED);
				 stringTrans(color);
				 stringTrans("Toggle\r\n");
				 stringTrans("CMD?\r\n");
				 color = "";
				 command = "";
				 secondCommand = 0;
				 flag = 0;
			 }

			 else
			 {
				 stringTrans("Undefined command\r\n");
				 stringTrans("CMD?\r\n");
				 color = "";
				 command = "";
				 secondCommand = 0;
				 flag = 0;
			 }
		 }
	
		
		else if(flag)
	  {
			if(strcmp(color, "red") == 0)
			{
				 LED = 6;
				 color = "Red ";
				 secondCommand = 1;
				 flag = 0;
			}
					 
			else if(strcmp(color, "blue") == 0)
			{
				 LED = 7;
				 color = "Blue ";
				 secondCommand = 1;
				 flag = 0;
			}				 
	
			else if(strcmp(color, "orange") == 0)
			{	
				 LED = 8;
				 color = "Orange ";
				 secondCommand = 1;
				 flag = 0;
			}			 
				 
			else if(strcmp(color, "green") == 0)
			{
				 LED = 9;
				 color = "Green ";
				 secondCommand = 1;
				 flag = 0;
			}

			else
			{
				 stringTrans("Undefined command\r\n");
				 stringTrans("CMD?\r\n");
				 color = "";
				 first = 0;
				 flag = 0;
			}				 
		}
	}
		debouncer = (debouncer << 1);
		
		HAL_Delay(3);
		
		if(GPIOA->IDR & 0x1)
		{
			debouncer |= 0x01;
		}
		
		if (debouncer == 0x7FFFFFFF) 
		{
			stringTrans("I'm just a sewer pidgeon.");
		} */

}